# 2장 변수 스코프
<br>

## 아이템16) eval을 이용해 지역 변수를 생성하지 마라
<img src='./이미지/2장-아이템16-1.png' width="600px"></img><br>

Mdn 문서에서는 eval 함수에 대해서 위와 같은 경고를 하고 있다. eval 함수는 문자로 표현된 자바스크립트 코드를 실행하는 함수이다. eval은 자신의 인자를 자바스크립트 프로그램처럼 해석하지만, 이 프로그램은 호출자의 지역 스코프 안에서 실행된다. 임베드된 프로그램의 전역 변수는 호출한 프로그램의 지역 변수로 생성된다.
```javascript
function test(x) {
    eval("var y = x;");
    return y;
}
test("hello");
```
이때 eval 함수에 임베드된 선언문은 eval 함수가 호출될 때에만 선언된다. 실행되었을 경우, 그 변수를 스코프 내로 가져오게 된다.
```javascript
var y = "global";
function test(src){
    eval(src);
    return y;
}
test("var y = 'local';");   // local
test("var z = 'local';");   // global
```
이 코드는 불안정하고 안정하지 않다. 외부의 호출자가 test 함수 내부 스코프를 변경할 수 있기 때문이다. 이러한 방식은 ES5 스트릭트 모드의 호환성에 적합하지 않으므로 사용되지 않아야 한다. eval이 외부 스코프에 영향을 주지 않도록 하는 간단한 방법은 명시적으로 감싸진 스코프 안에서 실행되도록 하는 것이다.
```javascript
var y = "global";
function test(src){
    (function(){eval(src);})();
    return y;
}
test("var y = 'local';");   // global
test("var z = 'local';");   // global
```